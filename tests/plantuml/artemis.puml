@startuml
!include <C4/C4_Deployment.puml>

HIDE_STEREOTYPE()
LAYOUT_TOP_DOWN()

title Test activemq (Dataflow Diagram)

Node(activemqserver, "Artemis Server Docker", "RedHat", "container name: amq") {
     
    Container(activemqserver_listeners, "Java Bridge", "Java JRE 17", "/opt/jprogram/start_listener.sh")
    
    Node(activemqserver_activemqbroker, "Artemis Broker", "ActiveMQ 6.1.4", "console: 8161", MsgContainer) {
        ContainerQueue(activemqserver_activemqbroker_toplc, "ToPLC", "Queue")
        ContainerQueue(activemqserver_activemqbroker_fromplc, "FromPLC", "Queue")
        Container(activemqserver_activemqbroker_jmxexport, "JMX exporter", "Java")
    }
}

Node(plcsimulator, "PLC simulator Docker", "Python", "container name: plc"){
  Container(plcsimulator_process, "PLC simulator", "Python 3.9", "plc-simulator.py")
}

Node(prometheusserver, "Prometheus server Docker", "", "container name: prometheus"){
  Container(prometheusserver_process, "Prometheus", "", "console: 9080")
}

Node(wcsserver, "WCS server Docker", "Redhat", "container name: wcs"){
  Container(wcsserver_process, "WCS service", "Progress 4gl", "")
}

Rel_U(activemqserver_listeners, activemqserver_activemqbroker_fromplc, "sends to", "amqp 5672")
Rel_U(activemqserver_listeners, activemqserver_activemqbroker_toplc, "receives from", "amqp 5672")

Rel_U(wcsserver_process, activemqserver_activemqbroker_toplc, "sends to", "amqp 5672") 
Rel_U(wcsserver_process, activemqserver_activemqbroker_fromplc, "receives from", "amqp 5672") 
Rel_U(activemqserver_activemqbroker_jmxexport, prometheusserver_process, "sends to", "port 8020")
BiRel(plcsimulator_process, activemqserver_listeners, "sends to\nreceives from", "port 800[1-3]")

@enduml